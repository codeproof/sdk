/////////////////////////////////////////////////////////////////////////////////////////////
//
// Codeproof MDM API SDK sample program. 
//
// Copyright (C) 2014-2018, Codeproof Technologies Inc. All rights reserved. http://codeproof.com 
//
// Email us at support@codeproof.com for questions/comments/feedback.
//    
//////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using InstallAPK.codeproofService;

namespace deployApps
{
    class Program
    {
        static string AndroidProductId = "AFF8A4F8-319F-4B45-B1F5-AB31972192A4"; //do not change it


        static string ManagedGroup = "Android Devices"; //managed group name in Mobile Policy Manager
 

        static CodeproofServiceClient cpservice = new CodeproofServiceClient();
        static Authenticate AuthObj = new Authenticate();


        static void Main(string[] args)
        {
            //
            // The following sample C# code shows how to deploy enterprise iOS apps and app configurations programatically
            //

            Console.WriteLine("Started!");


            //API authentication info

            AuthObj.userid = ""; //account login email 
            AuthObj.apikey = ""; //get it at "https://www.codeproof.com/console/Account/Login?ReturnUrl=/console/MyAccount/Index" 


            //get installed application info

            GetAInstalledppInfo();


            //install app now.

            PushVendingController();


            Console.WriteLine("Done!");
        }



        static void GetAInstalledppInfo()
        {

            CPID[] cpids = cpservice.GetCPIDs(AuthObj);

            foreach (CPID record in cpids)
            {

                //Query each device properties from Codeproof Cloud.

                DeviceProperty dp = cpservice.GetDeviceProperty(AuthObj, record);


                Console.WriteLine("\n\n");
                Console.WriteLine("=== Device [ " + dp.DeviceName + "] Data ===");
                Console.WriteLine("\n\n");

                //Show Device Ids
                Console.WriteLine("cpid=" + record.cpid);
                Console.WriteLine("devicetype=" + record.devicetype);

                //Show Installed Apps
                Console.WriteLine("\n");
                Console.WriteLine("---Installed Applications -->");
                Console.WriteLine("\n");
                foreach (App app in dp.InstalledApplications)
                {
                    Console.WriteLine("App Name = " + app.AppName);
                    Console.WriteLine("App Version = " + app.Version);
                    Console.WriteLine("App Package = " + app.PackageName);
                    Console.WriteLine("");
                }

                /********
                //Get all the Device Properties
                Console.WriteLine("\n");
                Console.WriteLine("---Device Properties -->");
                Console.WriteLine("\n");
                foreach (NameValue prop in dp.DeviceInformations)
                {
                    Console.WriteLine(prop.Name + " = " + prop.Value);
                }
                 *****/
            }

        }
        

        public static void PushVendingController()
        {

            string apkUrl = "https://s3.amazonaws.com/storage.codeproof.com/downloads/software/securebrowser/codeproof-browser-4.120216.apk"; //codeproof browser app

            CommandRecord cmd = new CommandRecord();

            cmd.Command = "installapp"; 
            cmd.CommandName = "SDK App Install";
            cmd.Param1 = apkUrl;
            cmd.Param2 = ""; //passs any app setup data here
            cmd.Notes = "command generated by API";

            try{

                CommandRecord cmdupdated = cpservice.ExecuteCommandGroup(AuthObj, ManagedGroup, AndroidProductId, cmd);

                Console.WriteLine("Command Created Successfully: " + cmdupdated.Command);
            }
            catch(Exception e) {

                Console.WriteLine("Exception: " + e.Message);
            }

        }

    }
}
